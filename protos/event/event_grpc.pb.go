// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: protos/event/event.proto

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventGrpcServiceClient is the client API for EventGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventGrpcServiceClient interface {
	HandleEvent(ctx context.Context, opts ...grpc.CallOption) (EventGrpcService_HandleEventClient, error)
}

type eventGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventGrpcServiceClient(cc grpc.ClientConnInterface) EventGrpcServiceClient {
	return &eventGrpcServiceClient{cc}
}

func (c *eventGrpcServiceClient) HandleEvent(ctx context.Context, opts ...grpc.CallOption) (EventGrpcService_HandleEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventGrpcService_ServiceDesc.Streams[0], "/protos.EventGrpcService/HandleEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventGrpcServiceHandleEventClient{stream}
	return x, nil
}

type EventGrpcService_HandleEventClient interface {
	Send(*Events) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type eventGrpcServiceHandleEventClient struct {
	grpc.ClientStream
}

func (x *eventGrpcServiceHandleEventClient) Send(m *Events) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventGrpcServiceHandleEventClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventGrpcServiceServer is the server API for EventGrpcService service.
// All implementations must embed UnimplementedEventGrpcServiceServer
// for forward compatibility
type EventGrpcServiceServer interface {
	HandleEvent(EventGrpcService_HandleEventServer) error
	mustEmbedUnimplementedEventGrpcServiceServer()
}

// UnimplementedEventGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventGrpcServiceServer struct {
}

func (UnimplementedEventGrpcServiceServer) HandleEvent(EventGrpcService_HandleEventServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleEvent not implemented")
}
func (UnimplementedEventGrpcServiceServer) mustEmbedUnimplementedEventGrpcServiceServer() {}

// UnsafeEventGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventGrpcServiceServer will
// result in compilation errors.
type UnsafeEventGrpcServiceServer interface {
	mustEmbedUnimplementedEventGrpcServiceServer()
}

func RegisterEventGrpcServiceServer(s grpc.ServiceRegistrar, srv EventGrpcServiceServer) {
	s.RegisterService(&EventGrpcService_ServiceDesc, srv)
}

func _EventGrpcService_HandleEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventGrpcServiceServer).HandleEvent(&eventGrpcServiceHandleEventServer{stream})
}

type EventGrpcService_HandleEventServer interface {
	Send(*Response) error
	Recv() (*Events, error)
	grpc.ServerStream
}

type eventGrpcServiceHandleEventServer struct {
	grpc.ServerStream
}

func (x *eventGrpcServiceHandleEventServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventGrpcServiceHandleEventServer) Recv() (*Events, error) {
	m := new(Events)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventGrpcService_ServiceDesc is the grpc.ServiceDesc for EventGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.EventGrpcService",
	HandlerType: (*EventGrpcServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleEvent",
			Handler:       _EventGrpcService_HandleEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/event/event.proto",
}
